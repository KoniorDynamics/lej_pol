{"version":3,"sources":["assets/images/licznik.png","components/counter/counter.jsx","assets/images/rotor.svg","components/rotor/rotor.jsx","components/volume-meter/volume-meter.jsx","websocket.js","flow-profiles.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["Counter","handleWaterUse","openTap","closeTap","spendWater","usageType","time","className","src","background","useMap","name","target","alt","title","coords","shape","onClick","onMouseDown","onMouseUp","Rotor","rotation","rotorImg","style","transform","VolumeMeter","totalVolume","totalVolumeStringArray","toString","split","dotIndex","indexOf","zeros","i","push","map","character","index","socket","io","connect","websocket","on","console","log","message","flow","emit","flowProfiles","tap","washingMachine","Math","abs","cos","dishWashingMachine","shower","App","useState","isWaterFlowing","setWaterFlow","setRotation","tapFlowInterval","setTapFlowInterval","totalWaterVolume","setTotalWaterVolume","waterUsage","timeout","change","flowInterval","setInterval","JSON","stringify","Date","now","parseFloat","toFixed","setTimeout","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7202edab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/licznik.14f6d54b.png\";","import React, {useState} from 'react';\nimport background from '../../assets/images/licznik.png';\nimport './counter.css';\n\nconst Counter = ({handleWaterUse, openTap, closeTap}) => {\n\n    const spendWater = (usageType, time) => {\n        handleWaterUse(usageType, time);\n    };\n\n    return (\n        <div className='main-wrapper'>\n            <img className='counter-image' src={background} useMap='#map'/>\n            <map name=\"map\">\n                <area target=\"\" alt=\"pralka\" title=\"pralka\" coords=\"60,100,158,231\" shape=\"rect\" onClick={() => {\n                    spendWater('washingMachine')\n                }}/>\n                <area target=\"\" alt=\"zmywarka\" title=\"zmywarka\" coords=\"477,283,597,406\" shape=\"rect\" onClick={() => {\n                    spendWater('dishWashingMachine')\n                }}/>\n                <area target=\"\" alt=\"kran\" title=\"kran\"\n                      coords=\"282,128,275,113,273,49,290,31,326,32,326,6,365,8,361,30,379,30,378,67,311,66,308,116,299,126\"\n                      shape=\"poly\" onMouseDown={openTap} onMouseUp={closeTap}/>\n                <area target=\"\" alt=\"prysznic\" title=\"prysznic\"\n                      coords=\"431,287,435,231,427,171,447,155,469,169,493,144,529,146,531,188,497,199,466,221,464,286\"\n                      shape=\"poly\" onClick={() => {\n                    spendWater('shower')\n                }}/>\n            </map>\n        </div>\n    )\n};\n\nexport default Counter;\n","export default __webpack_public_path__ + \"static/media/rotor.849c5d33.svg\";","import React from 'react';\nimport rotorImg from '../../assets/images/rotor.svg';\nimport './rotor.css';\n\nconst Rotor = ({rotation}) => {\n    return (\n        <div className=\"rotor-wrapper\">\n            <img src={rotorImg} style={{transform: 'rotate(' + rotation + 'deg)'}}/>\n        </div>\n    );\n};\n\nexport default Rotor;\n","import React from 'react';\nimport './volume-meter.css';\n\nconst VolumeMeter = ({totalVolume}) => {\n\n    return (\n        <div className='metter-wrapper'>\n            {\n                (() => {\n                    const totalVolumeStringArray = totalVolume.toString().split('');\n                    const dotIndex = totalVolumeStringArray.indexOf('.');\n                    const zeros = [];\n                    for (let i = 0; i <= dotIndex; i++) {\n                        zeros.push('0');\n                    }\n                    return [...zeros, ...totalVolumeStringArray].map(\n                        (character, index) => {\n                            return (\n                                <div className=\"digit-container\" key={index}>{character}</div>\n                            )\n                        }\n                    )\n                })()\n            }\n        </div>\n    );\n};\n\nexport default VolumeMeter;\n","import io from 'socket.io-client';\n\nconst socket = io().connect('http://127.0.0.1:5000/api_v1/water_meter');\n\nconst initiateWebsocketConnection = () => {\n    socket.on('connected', () => {\n        console.log('WebSocket Client Connected');\n    });\n    socket.on('event', (message) => {\n        console.log(message);\n    });\n};\n\nconst sendMessage = (flow) => {\n    console.log(flow)\n    socket.emit('message', flow);\n};\n\nexport const websocket = {initiateWebsocketConnection, sendMessage};\n","const tap = () => {\n    return 0.00027;\n};\n\nconst washingMachine = (time) => {\n    return Math.abs(Math.cos((time + 8) * 3 / 8)) * 0.00032;\n};\n\nconst dishWashingMachine = (time) => {\n    return Math.abs(Math.cos((time % 7) / 3)) * 0.00032;\n};\n\nconst shower = (time) => {\n    return Math.abs(Math.cos(time/3)) * 0.00029;\n};\n\nexport const flowProfiles = {tap, washingMachine, dishWashingMachine, shower};\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./components/counter/counter\";\nimport Rotor from \"./components/rotor/rotor.jsx\";\nimport VolumeMeter from \"./components/volume-meter/volume-meter\";\nimport {websocket} from \"./websocket\";\nimport {flowProfiles} from \"./flow-profiles\";\n\nfunction App() {\n\n    websocket.initiateWebsocketConnection();\n\n    const [isWaterFlowing, setWaterFlow] = useState(false);\n    const [rotation, setRotation] = useState(0);\n    const [tapFlowInterval, setTapFlowInterval] = useState(0);\n    const [totalWaterVolume, setTotalWaterVolume] = useState(3.345765);\n\n    const handleWaterUse = (waterUsage, time) => {\n        if (isWaterFlowing) {\n            return;\n        }\n        let timeout;\n        switch (waterUsage) {\n            case 'washingMachine':\n                timeout = 17000;\n                break;\n            case 'dishWashingMachine':\n                timeout = 24000;\n                break;\n            case 'shower':\n                timeout = 8000;\n                break;\n            case 'tap':\n                timeout = time;\n                break;\n            default:\n                timeout = 0;\n        }\n        setWaterFlow(true);\n        let change = 0;\n        const flowInterval = setInterval(() => {\n            change += 1;\n            setRotation(rotation + change);\n            if (change % 100 === 0) {\n                websocket.sendMessage(JSON.stringify({time: Date.now(), flow: flowProfiles[waterUsage](change*10)}));\n            }\n            setTotalWaterVolume((parseFloat(totalWaterVolume) + change / 1000000).toFixed(6))\n        }, 10);\n        setTimeout(() => {\n            setWaterFlow(false);\n            clearInterval(flowInterval);\n        }, timeout);\n    };\n\n    const openTap = () => {\n        if (isWaterFlowing) {\n            return;\n        }\n        setWaterFlow(true);\n        let change = 0;\n        setTapFlowInterval(setInterval(() => {\n            change += 1;\n            setRotation(rotation + change);\n            if (change % 100 === 0) {\n                websocket.sendMessage(JSON.stringify({time: Date.now(), flow: flowProfiles.tap()}));\n            }\n            setTotalWaterVolume((parseFloat(totalWaterVolume) + change / 1000000).toFixed(6))\n        }, 10));\n    };\n\n    const closeTap = () => {\n        setWaterFlow(false);\n        clearInterval(tapFlowInterval);\n    };\n\n    return (\n        <>\n            <Counter handleWaterUse={(waterUsage) => {\n                handleWaterUse(waterUsage)\n            }} closeTap={() => {\n                closeTap()\n            }} openTap={() => {\n                openTap()\n            }}></Counter>\n            <Rotor rotation={rotation}/>\n            <VolumeMeter totalVolume={totalWaterVolume}/>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}